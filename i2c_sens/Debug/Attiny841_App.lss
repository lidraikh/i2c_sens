
Attiny841_App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000336  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f1  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000864  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  00001f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000207b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2c c0       	rjmp	.+88     	; 0x74 <__vector_13>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	22 c0       	rjmp	.+68     	; 0x72 <__bad_interrupt>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	20 c0       	rjmp	.+64     	; 0x72 <__bad_interrupt>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	84 c0       	rjmp	.+264    	; 0x144 <__vector_29>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e2 ec       	ldi	r30, 0xC2	; 194
  50:	f2 e0       	ldi	r31, 0x02	; 2
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a0 30       	cpi	r26, 0x00	; 0
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	a0 e0       	ldi	r26, 0x00	; 0
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	ae 30       	cpi	r26, 0x0E	; 14
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	eb d0       	rcall	.+470    	; 0x246 <main>
  70:	26 c1       	rjmp	.+588    	; 0x2be <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_13>:



/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
	//Buffer[0] = ADCH;			// Output ADCH to PortD
	//Buffer[1] = ADCL;			// Output ADCH to PortD
}
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <setup>:

void setup() {	
	/*
	* Setup All Needed I/O
	*/
	DDRB = 0x00; //Makes PORTB as Output
  88:	17 ba       	out	0x17, r1	; 23
	DDRA = 0x88;			// Configure PortA 1000 1000
  8a:	88 e8       	ldi	r24, 0x88	; 136
  8c:	8a bb       	out	0x1a, r24	; 26
	
	DIDR0 =0x07; // ADC0/1/2 digital input disabled
  8e:	87 e0       	ldi	r24, 0x07	; 7
  90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	/* Enable Interrupt */
	sei();				// Enable Global Interrupts
  94:	78 94       	sei
	
	/*
	* Setup I2C slave
	*/
	TWSCRA = 1<<TWDIE | 1<<TWASIE | 1<<TWEN;
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <__EEPROM_REGION_LENGTH__+0x7f00a5>
	TWSA = I2CAddress<<1;
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__EEPROM_REGION_LENGTH__+0x7f00a2>
  a2:	08 95       	ret

000000a4 <readTempreture>:
	
	/*
	* ADC Setup
	*/
	// PA0 is ADC0 input
	ADCSRA = 0x83;			// Enable the ADC and its interrupt feature, 
  a4:	83 e8       	ldi	r24, 0x83	; 131
  a6:	85 b9       	out	0x05, r24	; 5
	// and set the ACD clock pre-scalar to sysclk/16, not interrupt
	ADCSRB = 0x00;			
  a8:	14 b8       	out	0x04, r1	; 4
	ADMUXA = 0x01;			// Select single ended line
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	89 b9       	out	0x09, r24	; 9
	ADMUXB = 0x00; // VCC as Vref,
  ae:	18 b8       	out	0x08, r1	; 8
	// data registers and select ADC0 as input channel
	for(int i=0; i<1; i++){
		ADCSRA |= 1<<ADSC;		// Start Conversion
  b0:	2e 9a       	sbi	0x05, 6	; 5
		while ( ADCSRA & ( 1 << ADSC ) );//wait for conversion to end
  b2:	2e 99       	sbic	0x05, 6	; 5
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <readTempreture+0xe>
	}
	Buffer[0] = ADCH;			// Output ADCH
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ea e0       	ldi	r30, 0x0A	; 10
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	91 83       	std	Z+1, r25	; 0x01
  c0:	80 83       	st	Z, r24
	Buffer[1] = ADCL;			// Output ADCH
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	93 83       	std	Z+3, r25	; 0x03
  c8:	82 83       	std	Z+2, r24	; 0x02
	
	adcResult = ADCL;
  ca:	26 b1       	in	r18, 0x06	; 6
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <adcResult+0x1>
  d2:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <adcResult>
	adcResult |= ADCH << 8;
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	38 2b       	or	r19, r24
  da:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <adcResult+0x1>
  de:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <adcResult>
	
	// R = 10K ((1023/ADC)-1)
	
	rResult =10000*((1023/adcResult)-1);
  e2:	ef ef       	ldi	r30, 0xFF	; 255
  e4:	f3 e0       	ldi	r31, 0x03	; 3
  e6:	cf 01       	movw	r24, r30
  e8:	b9 01       	movw	r22, r18
  ea:	d5 d0       	rcall	.+426    	; 0x296 <__udivmodhi4>
  ec:	cb 01       	movw	r24, r22
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	86 0f       	add	r24, r22
  fc:	97 1f       	adc	r25, r23
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	86 0f       	add	r24, r22
 104:	97 1f       	adc	r25, r23
 106:	82 95       	swap	r24
 108:	92 95       	swap	r25
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	98 27       	eor	r25, r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	98 27       	eor	r25, r24
 112:	86 1b       	sub	r24, r22
 114:	97 0b       	sbc	r25, r23
 116:	ac 01       	movw	r20, r24
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	42 95       	swap	r20
 11e:	52 95       	swap	r21
 120:	50 7f       	andi	r21, 0xF0	; 240
 122:	54 27       	eor	r21, r20
 124:	40 7f       	andi	r20, 0xF0	; 240
 126:	54 27       	eor	r21, r20
 128:	84 0f       	add	r24, r20
 12a:	95 1f       	adc	r25, r21
 12c:	68 0f       	add	r22, r24
 12e:	79 1f       	adc	r23, r25
 130:	60 51       	subi	r22, 0x10	; 16
 132:	77 42       	sbci	r23, 0x27	; 39
 134:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <rResult+0x1>
 138:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <rResult>
	// 1/T = 1/To + (1/B)(ln(R/Ro))
	// 1/T = 1/273.15 + (1/3428)(ln(rResult/10000))
	//double z = log(rResult/10000);
	//kTemp = 1/(1/273.15 + (1/3428)(z));
	return 1023 - adcResult;
}
 13c:	cf 01       	movw	r24, r30
 13e:	82 1b       	sub	r24, r18
 140:	93 0b       	sbc	r25, r19
 142:	08 95       	ret

00000144 <__vector_29>:
	-Otherwise the interrupt is a data interrupt:
	-- If the address indicated a Master Read and there are more bytes to send, put the next byte in the data register, otherwise end the transaction.
	-- If the address indicated a Master Write, read the next byte from the data buffer and display it, and send an ACK if we want to receive more bytes, otherwise a NACK.
*/
// TWI interrupt
ISR(TWI_SLAVE_vect) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	//result = readTempreture();
	if (TWSSRA & 1<<TWASIF) {              // Address received
 15a:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 15e:	86 ff       	sbrs	r24, 6
 160:	14 c0       	rjmp	.+40     	; 0x18a <__vector_29+0x46>
		if (TWSSRA & 1<<TWDIR) {             // Master read
 162:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 166:	81 ff       	sbrs	r24, 1
 168:	08 c0       	rjmp	.+16     	; 0x17a <__vector_29+0x36>
			Read = 0;
 16a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 16e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
			TWSCRB = 3<<TWCMD0;                // ACK
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 178:	5b c0       	rjmp	.+182    	; 0x230 <__vector_29+0xec>
			} else {                             // Master write
			Write = 0;                         // Reset pointer
 17a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Write+0x1>
 17e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Write>
			TWSCRB = 3<<TWCMD0;                // ACK
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 188:	53 c0       	rjmp	.+166    	; 0x230 <__vector_29+0xec>
		}
		} else if (TWSSRA & 1<<TWDIF) {        // Data interrupt
 18a:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 18e:	88 23       	and	r24, r24
 190:	0c f0       	brlt	.+2      	; 0x194 <__vector_29+0x50>
 192:	4e c0       	rjmp	.+156    	; 0x230 <__vector_29+0xec>
		if (TWSSRA & 1<<TWDIR) {             // Master read
 194:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 198:	81 ff       	sbrs	r24, 1
 19a:	22 c0       	rjmp	.+68     	; 0x1e0 <__vector_29+0x9c>
			if (Read < 2) {
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1a4:	02 97       	sbiw	r24, 0x02	; 2
 1a6:	c4 f4       	brge	.+48     	; 0x1d8 <__vector_29+0x94>
				TWSD = Buffer[Read++];				
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1b0:	9c 01       	movw	r18, r24
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_end+0x1>
 1ba:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	fc 01       	movw	r30, r24
 1c4:	e6 5f       	subi	r30, 0xF6	; 246
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	80 81       	ld	r24, Z
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
				TWSCRB = 3<<TWCMD0;				
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 1d6:	2c c0       	rjmp	.+88     	; 0x230 <__vector_29+0xec>
			} else TWSCRB = 2<<TWCMD0;         // Complete transaction
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 1de:	28 c0       	rjmp	.+80     	; 0x230 <__vector_29+0xec>
		} else {                             // Master write
			if (Write < 2) Buffer[Write++] = TWSD;
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Write>
 1e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Write+0x1>
 1e8:	02 97       	sbiw	r24, 0x02	; 2
 1ea:	ac f4       	brge	.+42     	; 0x216 <__vector_29+0xd2>
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Write>
 1f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Write+0x1>
 1f4:	9c 01       	movw	r18, r24
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <Write+0x1>
 1fe:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <Write>
 202:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	fc 01       	movw	r30, r24
 20e:	e6 5f       	subi	r30, 0xF6	; 246
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	31 83       	std	Z+1, r19	; 0x01
 214:	20 83       	st	Z, r18
			if (Write < 2) TWSCRB = 3<<TWCMD0; // ACK
 216:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Write>
 21a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Write+0x1>
 21e:	02 97       	sbiw	r24, 0x02	; 2
 220:	24 f4       	brge	.+8      	; 0x22a <__vector_29+0xe6>
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 228:	03 c0       	rjmp	.+6      	; 0x230 <__vector_29+0xec>
			else TWSCRB = 1<<TWAA | 2<<TWCMD0; // NACK and complete
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
		}
	}
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <main>:

int main(void)
{
	CLKCR  |= 0x02;
 246:	e2 e7       	ldi	r30, 0x72	; 114
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
	CCP = 0xD8;
 250:	88 ed       	ldi	r24, 0xD8	; 216
 252:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
	CLKPR = 0x02;
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__EEPROM_REGION_LENGTH__+0x7f0073>
	setup();
 25c:	15 df       	rcall	.-470    	; 0x88 <setup>
	while(1) //infinite loop
	{
		//PORTB = (1<<PINB0); //Turns ON All LEDs
		PORTB &= ~(1 << PINB0);           // switch PD0 LED off		
 25e:	c0 98       	cbi	0x18, 0	; 24
		PORTA &= ~(1 << PINA7);           // switch PD0 LED off	
 260:	df 98       	cbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	2f e3       	ldi	r18, 0x3F	; 63
 264:	8d e0       	ldi	r24, 0x0D	; 13
 266:	93 e0       	ldi	r25, 0x03	; 3
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x22>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x2c>
 272:	00 00       	nop
		_delay_ms(500); //1 second delay
		//while ( ADCSRA & ( 1 << ADSC ) );//wait for conversion to end
		result = readTempreture();
 274:	17 df       	rcall	.-466    	; 0xa4 <readTempreture>
 276:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <result+0x1>
 27a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <result>
		PORTB |=  (1 << PINB0);           // switch PD0 LED on
 27e:	c0 9a       	sbi	0x18, 0	; 24
		PORTA |= (1 << PINA7);           // switch PD0 LED off	
 280:	df 9a       	sbi	0x1b, 7	; 27
 282:	2f e3       	ldi	r18, 0x3F	; 63
 284:	8d e0       	ldi	r24, 0x0D	; 13
 286:	93 e0       	ldi	r25, 0x03	; 3
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x42>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x4c>
 292:	00 00       	nop
 294:	e4 cf       	rjmp	.-56     	; 0x25e <main+0x18>

00000296 <__udivmodhi4>:
 296:	aa 1b       	sub	r26, r26
 298:	bb 1b       	sub	r27, r27
 29a:	51 e1       	ldi	r21, 0x11	; 17
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <__udivmodhi4_ep>

0000029e <__udivmodhi4_loop>:
 29e:	aa 1f       	adc	r26, r26
 2a0:	bb 1f       	adc	r27, r27
 2a2:	a6 17       	cp	r26, r22
 2a4:	b7 07       	cpc	r27, r23
 2a6:	10 f0       	brcs	.+4      	; 0x2ac <__udivmodhi4_ep>
 2a8:	a6 1b       	sub	r26, r22
 2aa:	b7 0b       	sbc	r27, r23

000002ac <__udivmodhi4_ep>:
 2ac:	88 1f       	adc	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	5a 95       	dec	r21
 2b2:	a9 f7       	brne	.-22     	; 0x29e <__udivmodhi4_loop>
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	bc 01       	movw	r22, r24
 2ba:	cd 01       	movw	r24, r26
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
