
Attiny841_App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800116  00800116  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4c  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000500  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  000023c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002629  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2c c0       	rjmp	.+88     	; 0x74 <__vector_13>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	22 c0       	rjmp	.+68     	; 0x72 <__bad_interrupt>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	20 c0       	rjmp	.+64     	; 0x72 <__bad_interrupt>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	86 c0       	rjmp	.+268    	; 0x148 <__vector_29>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e4 eb       	ldi	r30, 0xB4	; 180
  50:	f3 e0       	ldi	r31, 0x03	; 3
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a6 31       	cpi	r26, 0x16	; 22
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	a6 e1       	ldi	r26, 0x16	; 22
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	aa 31       	cpi	r26, 0x1A	; 26
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	7a d1       	rcall	.+756    	; 0x364 <main>
  70:	9f c1       	rjmp	.+830    	; 0x3b0 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_13>:



/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
	//Buffer[0] = ADCH;			// Output ADCH to PortD
	//Buffer[1] = ADCL;			// Output ADCH to PortD
}
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <setup>:
void setup() {
	/*
	* Setup All Needed I/O
	*/
	//DDRB = 0x00; //Makes PORTB as Output
	DDRB = 0x0f; //Makes PORTB as Output
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	87 bb       	out	0x17, r24	; 23
	DIDR0 =0x07; // ADC0/1/2 digital input disabled
  8c:	87 e0       	ldi	r24, 0x07	; 7
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	/* Enable Interrupt */
	sei();				// Enable Global Interrupts
  92:	78 94       	sei
	
	/*
	* Setup I2C slave
	*/
	TWSCRA = 1<<TWDIE | 1<<TWASIE | 1<<TWEN;
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <__EEPROM_REGION_LENGTH__+0x7f00a5>
	TWSA = I2CAddress<<1;
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__EEPROM_REGION_LENGTH__+0x7f00a2>
  a0:	08 95       	ret

000000a2 <analogRead>:
	/*
	* ADC Setup
	*/
	uint16_t adcResult = 0;
	// PA0 is ADC0 input
	ADCSRA = 0x83;			// Enable the ADC and its interrupt feature,
  a2:	23 e8       	ldi	r18, 0x83	; 131
  a4:	25 b9       	out	0x05, r18	; 5
	// and set the ACD clock pre-scalar to sysclk/16, not interrupt
	ADCSRB = 0x00;
  a6:	14 b8       	out	0x04, r1	; 4
	ADMUXA = AN;			// Select single ended line
  a8:	89 b9       	out	0x09, r24	; 9
	ADMUXB = 0x60; // 4.096V as Vref,
  aa:	20 e6       	ldi	r18, 0x60	; 96
  ac:	28 b9       	out	0x08, r18	; 8
	// data registers and select ADC0 as input channel
	for(int i=0; i<1; i++){
		ADCSRA |= 1<<ADSC;		// Start Conversion
  ae:	2e 9a       	sbi	0x05, 6	; 5
		while ( ADCSRA & ( 1 << ADSC ) );//wait for conversion to end
  b0:	2e 99       	sbic	0x05, 6	; 5
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <analogRead+0xe>
	}
	switch (AN)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	91 f0       	breq	.+36     	; 0xde <analogRead+0x3c>
  ba:	30 f0       	brcs	.+12     	; 0xc8 <analogRead+0x26>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	c9 f0       	breq	.+50     	; 0xf4 <analogRead+0x52>
  c2:	07 97       	sbiw	r24, 0x07	; 7
  c4:	11 f1       	breq	.+68     	; 0x10a <analogRead+0x68>
  c6:	2b c0       	rjmp	.+86     	; 0x11e <analogRead+0x7c>
	{
		case 0:
		Buffer[4] = ADCH;			// Output ADCH
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	e0 e0       	ldi	r30, 0x00	; 0
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	91 87       	std	Z+9, r25	; 0x09
  d2:	80 87       	std	Z+8, r24	; 0x08
		Buffer[5] = ADCL;			// Output ADCH
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	93 87       	std	Z+11, r25	; 0x0b
  da:	82 87       	std	Z+10, r24	; 0x0a
		break;
  dc:	20 c0       	rjmp	.+64     	; 0x11e <analogRead+0x7c>
		case 1:
		Buffer[0] = ADCH;			// Output ADCH
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
		Buffer[1] = ADCL;			// Output ADCH
  ea:	86 b1       	in	r24, 0x06	; 6
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	93 83       	std	Z+3, r25	; 0x03
  f0:	82 83       	std	Z+2, r24	; 0x02
		break;
  f2:	15 c0       	rjmp	.+42     	; 0x11e <analogRead+0x7c>
		case 2:
		Buffer[2] = ADCH;			// Output ADCH
  f4:	87 b1       	in	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	95 83       	std	Z+5, r25	; 0x05
  fe:	84 83       	std	Z+4, r24	; 0x04
		Buffer[3] = ADCL;			// Output ADCH
 100:	86 b1       	in	r24, 0x06	; 6
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	97 83       	std	Z+7, r25	; 0x07
 106:	86 83       	std	Z+6, r24	; 0x06
		break;
 108:	0a c0       	rjmp	.+20     	; 0x11e <analogRead+0x7c>
		case 7:
		Buffer[6] = ADCH;			// Output ADCH
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	e0 e0       	ldi	r30, 0x00	; 0
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	95 87       	std	Z+13, r25	; 0x0d
 114:	84 87       	std	Z+12, r24	; 0x0c
		Buffer[7] = ADCL;			// Output ADCH
 116:	86 b1       	in	r24, 0x06	; 6
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	97 87       	std	Z+15, r25	; 0x0f
 11c:	86 87       	std	Z+14, r24	; 0x0e
		break;
		
	}
	
	adcResult = ADCL;
 11e:	86 b1       	in	r24, 0x06	; 6
	adcResult |= ADCH << 8;
 120:	27 b1       	in	r18, 0x07	; 7

	return adcResult;
 122:	90 e0       	ldi	r25, 0x00	; 0
	
}
 124:	92 2b       	or	r25, r18
 126:	08 95       	ret

00000128 <readT1>:

uint16_t readT1()
{
	uint16_t T1 = 0;
	T1 = analogRead(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	ba df       	rcall	.-140    	; 0xa2 <analogRead>
	return T1;
}
 12e:	08 95       	ret

00000130 <readC1>:

uint16_t readC1()
{
	uint16_t C1 = 0;
	C1 = analogRead(7);
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	b6 df       	rcall	.-148    	; 0xa2 <analogRead>
	return C1;
}
 136:	08 95       	ret

00000138 <readM1>:

uint16_t readM1()
{
	uint16_t M1 = 0;
	M1 = analogRead(1);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	b2 df       	rcall	.-156    	; 0xa2 <analogRead>
	return M1;
}
 13e:	08 95       	ret

00000140 <readM2>:

uint16_t readM2()
{
	uint16_t M2 = 0;
	M2 = analogRead(2);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ae df       	rcall	.-164    	; 0xa2 <analogRead>
	return M2;
}
 146:	08 95       	ret

00000148 <__vector_29>:
-Otherwise the interrupt is a data interrupt:
-- If the address indicated a Master Read and there are more bytes to send, put the next byte in the data register, otherwise end the transaction.
-- If the address indicated a Master Write, read the next byte from the data buffer and display it, and send an ACK if we want to receive more bytes, otherwise a NACK.
*/
// TWI interrupt
ISR(TWI_SLAVE_vect) {
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31

	if (TWSSRA & 1<<TWASIF) {              // Address received
 15e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 162:	86 ff       	sbrs	r24, 6
 164:	14 c0       	rjmp	.+40     	; 0x18e <__vector_29+0x46>
		if (TWSSRA & 1<<TWDIR) {             // Master read
 166:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 16a:	81 ff       	sbrs	r24, 1
 16c:	08 c0       	rjmp	.+16     	; 0x17e <__vector_29+0x36>
			Read = 0;
 16e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 172:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
			TWSCRB = 3<<TWCMD0;                // ACK
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 17c:	e8 c0       	rjmp	.+464    	; 0x34e <__stack+0x4f>
			} else {                             // Master write
			Write = 0;                         // Reset pointer
 17e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Write+0x1>
 182:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Write>
			TWSCRB = 3<<TWCMD0;                // ACK
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 18c:	e0 c0       	rjmp	.+448    	; 0x34e <__stack+0x4f>
		}
		} else if (TWSSRA & 1<<TWDIF) {        // Data interrupt
 18e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 192:	88 23       	and	r24, r24
 194:	0c f0       	brlt	.+2      	; 0x198 <__vector_29+0x50>
 196:	db c0       	rjmp	.+438    	; 0x34e <__stack+0x4f>
		if (TWSSRA & 1<<TWDIR) {             // Master read
 198:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 19c:	81 ff       	sbrs	r24, 1
 19e:	b2 c0       	rjmp	.+356    	; 0x304 <__stack+0x5>
			if (Read < 2) {
 1a0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1a4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 1a8:	02 97       	sbiw	r24, 0x02	; 2
 1aa:	0c f0       	brlt	.+2      	; 0x1ae <__vector_29+0x66>
 1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__vector_29+0x1b4>
				switch (I2CReg)
 1ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <I2CReg>
 1b2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <I2CReg+0x1>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	91 05       	cpc	r25, r1
 1ba:	09 f4       	brne	.+2      	; 0x1be <__vector_29+0x76>
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__vector_29+0xf4>
 1be:	34 f4       	brge	.+12     	; 0x1cc <__vector_29+0x84>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 05       	cpc	r25, r1
 1c4:	59 f0       	breq	.+22     	; 0x1dc <__vector_29+0x94>
 1c6:	02 97       	sbiw	r24, 0x02	; 2
 1c8:	09 f1       	breq	.+66     	; 0x20c <__vector_29+0xc4>
 1ca:	80 c0       	rjmp	.+256    	; 0x2cc <__vector_29+0x184>
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	91 05       	cpc	r25, r1
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <__vector_29+0x8c>
 1d2:	4c c0       	rjmp	.+152    	; 0x26c <__vector_29+0x124>
 1d4:	05 97       	sbiw	r24, 0x05	; 5
 1d6:	09 f4       	brne	.+2      	; 0x1da <__vector_29+0x92>
 1d8:	61 c0       	rjmp	.+194    	; 0x29c <__vector_29+0x154>
 1da:	78 c0       	rjmp	.+240    	; 0x2cc <__vector_29+0x184>
				{
					case 1:
					TWSD = Buffer[Read++];
 1dc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1e0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 1e4:	9c 01       	movw	r18, r24
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x1>
 1ee:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	fc 01       	movw	r30, r24
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	80 81       	ld	r24, Z
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
					TWSCRB = 3<<TWCMD0;
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
					break;
 20a:	a1 c0       	rjmp	.+322    	; 0x34e <__stack+0x4f>
					case 2:
					TWSD = Buffer[2+Read++];
 20c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 210:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 214:	9c 01       	movw	r18, r24
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x1>
 21e:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	fc 01       	movw	r30, r24
 228:	ec 5f       	subi	r30, 0xFC	; 252
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	80 81       	ld	r24, Z
 22e:	91 81       	ldd	r25, Z+1	; 0x01
 230:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
					TWSCRB = 3<<TWCMD0;
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
					break;
 23a:	89 c0       	rjmp	.+274    	; 0x34e <__stack+0x4f>
					case 3:
					TWSD = Buffer[4+Read++];
 23c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 240:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 244:	9c 01       	movw	r18, r24
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x1>
 24e:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	fc 01       	movw	r30, r24
 258:	e8 5f       	subi	r30, 0xF8	; 248
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	80 81       	ld	r24, Z
 25e:	91 81       	ldd	r25, Z+1	; 0x01
 260:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
					TWSCRB = 3<<TWCMD0;
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
					break;
 26a:	71 c0       	rjmp	.+226    	; 0x34e <__stack+0x4f>
					case 4:
					TWSD = Buffer[6+Read++];
 26c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 270:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 274:	9c 01       	movw	r18, r24
 276:	2f 5f       	subi	r18, 0xFF	; 255
 278:	3f 4f       	sbci	r19, 0xFF	; 255
 27a:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x1>
 27e:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	fc 01       	movw	r30, r24
 288:	e4 5f       	subi	r30, 0xF4	; 244
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	80 81       	ld	r24, Z
 28e:	91 81       	ldd	r25, Z+1	; 0x01
 290:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
					TWSCRB = 3<<TWCMD0;
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
					break;
 29a:	59 c0       	rjmp	.+178    	; 0x34e <__stack+0x4f>
					case 5:
					TWSD = Buffer[8+Read++];
 29c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2a0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 2a4:	9c 01       	movw	r18, r24
 2a6:	2f 5f       	subi	r18, 0xFF	; 255
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x1>
 2ae:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	fc 01       	movw	r30, r24
 2b8:	e0 5f       	subi	r30, 0xF0	; 240
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	80 81       	ld	r24, Z
 2be:	91 81       	ldd	r25, Z+1	; 0x01
 2c0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
					TWSCRB = 3<<TWCMD0;
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
					break;
 2ca:	41 c0       	rjmp	.+130    	; 0x34e <__stack+0x4f>
					default:
					TWSD = Buffer[8+Read++];
 2cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2d0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 2d4:	9c 01       	movw	r18, r24
 2d6:	2f 5f       	subi	r18, 0xFF	; 255
 2d8:	3f 4f       	sbci	r19, 0xFF	; 255
 2da:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x1>
 2de:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	fc 01       	movw	r30, r24
 2e8:	e0 5f       	subi	r30, 0xF0	; 240
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	80 81       	ld	r24, Z
 2ee:	91 81       	ldd	r25, Z+1	; 0x01
 2f0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
					TWSCRB = 3<<TWCMD0;
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 2fa:	29 c0       	rjmp	.+82     	; 0x34e <__stack+0x4f>
				}
					
			} else TWSCRB = 2<<TWCMD0;         // Complete transaction
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 302:	25 c0       	rjmp	.+74     	; 0x34e <__stack+0x4f>
			} else {                             // Master write
			//if (Write < 1) Buffer[Write++] = TWSD;
			if (Write < 1)
 304:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Write>
 308:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Write+0x1>
 30c:	18 16       	cp	r1, r24
 30e:	19 06       	cpc	r1, r25
 310:	84 f0       	brlt	.+32     	; 0x332 <__stack+0x33>
			{
				I2CReg = TWSD;
 312:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <I2CReg+0x1>
 31c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <I2CReg>
				++Write;
 320:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Write>
 324:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Write+0x1>
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Write+0x1>
 32e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Write>
			}
			if (Write < 1) TWSCRB = 3<<TWCMD0; // ACK
 332:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Write>
 336:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Write+0x1>
 33a:	18 16       	cp	r1, r24
 33c:	19 06       	cpc	r1, r25
 33e:	24 f0       	brlt	.+8      	; 0x348 <__stack+0x49>
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 346:	03 c0       	rjmp	.+6      	; 0x34e <__stack+0x4f>
			else TWSCRB = 1<<TWAA | 2<<TWCMD0; // NACK and complete
 348:	86 e0       	ldi	r24, 0x06	; 6
 34a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
		}
	}
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <main>:

int main(void)
{
	CLKCR  |= 0x02;
 364:	e2 e7       	ldi	r30, 0x72	; 114
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	80 83       	st	Z, r24
	CCP = 0xD8;
 36e:	88 ed       	ldi	r24, 0xD8	; 216
 370:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
	CLKPR = 0x02;
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__EEPROM_REGION_LENGTH__+0x7f0073>
	setup();
 37a:	86 de       	rcall	.-756    	; 0x88 <setup>
	while(1) //infinite loop
	{
		PORTB |= ( 1 << PINB0); //Turns ON All LEDs
 37c:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	2f e3       	ldi	r18, 0x3F	; 63
 380:	8d e0       	ldi	r24, 0x0D	; 13
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0x20>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x2a>
 38e:	00 00       	nop
		//PORTB &= ~(1 << PINB0);           // switch PD0 LED off
		_delay_ms(500); //1 second delay
	// Make readings
		readC1();
 390:	cf de       	rcall	.-610    	; 0x130 <readC1>
		readM1();
 392:	d2 de       	rcall	.-604    	; 0x138 <readM1>
		readM2();
 394:	d5 de       	rcall	.-598    	; 0x140 <readM2>
		readT1();
 396:	c8 de       	rcall	.-624    	; 0x128 <readT1>
		PORTB |=  (1 << PINB0);           // switch PD0 LED on
 398:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1 << PINB0);           // switch PD0 LED off
 39a:	c0 98       	cbi	0x18, 0	; 24
 39c:	2f e3       	ldi	r18, 0x3F	; 63
 39e:	8d e0       	ldi	r24, 0x0D	; 13
 3a0:	93 e0       	ldi	r25, 0x03	; 3
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x3e>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x48>
 3ac:	00 00       	nop
 3ae:	e6 cf       	rjmp	.-52     	; 0x37c <main+0x18>

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
